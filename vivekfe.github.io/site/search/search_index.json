{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#io-stories","title":"IO Stories","text":"<p>Interesting Stuff on Programming, Financial Engineering and Mathematics (\uff89 \u25d5 \u30ee \u25d5)\uff89*:\u30fb\uff9f \u2727</p>"},{"location":"#blog","title":"Blog","text":"<p>Each post is what I\u2019ve learned, and I wrote them down to share. Hope you\u2019ll find something interesting there.</p> <p>Read news</p>"},{"location":"#projects","title":"Projects","text":"<p>A list of my projects which are done for learning and practicing in free time. Wanna give me a hand ?! Let\u2019s do it together.</p> <p>See projects</p>"},{"location":"#github-stats","title":"GitHub Stats","text":"<p>Using GitHub Stats and Top Langs by  anuraghazra</p>"},{"location":"blog/site-setup/add-new-features/","title":"Add Tags, Recent Post and new Features to my Blog site","text":"","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#tags-page","title":"Tags page","text":"<p>The tag page is the place to list all tags, and list all pages that have a common tag. A new page will be created at <code>docs\\tags\\index.md</code>. There is a method to use MkDocs Macros in Markdown template, but it is quite complicated.</p> <p>Visit the Tags page to see the result.</p> <p>I use Jinja syntax to create the content of the Tags page, therefore, create a new file at <code>overrides\\tags.html</code> and use it as the template for the Tags page:</p> docs\\tags\\index.md<pre><code>---\ntitle: Tags\ndescription: Tags and list of pages\ntemplate: tags.html\ndisqus: \"\"\nhide:\n- navigation\n- toc\n---\n</code></pre> <p>The <code>tags.html</code> template to include 2 parts:</p> <ul> <li><code>tag-cloud.html</code>: make a tag cloud to see how many pages are associated with a tag</li> <li><code>tag-list-pages.html</code>: for each tag, list all pages having that tag to show similar articles together</li> </ul> overrides\\tags.html<pre><code>{% extends \"main.html\" %}\n\n{% block site_nav %}\n{% endblock %}\n\n{% block content %}\n    &lt;style&gt;\n        .md-typeset .tags {\n            max-width: 35rem; \n            margin: 0 auto;\n        }\n        .md-typeset .tags details {\n            background-color: aliceblue !important;\n            padding: 0.5em 1em;\n        }\n\n    &lt;/style&gt;\n    &lt;div class=\"tags\"&gt;\n{% include \"partials/tag-cloud.html\" %}\n        &lt;hr&gt;\n{% include \"partials/tag-page-list.html\" %}\n    &lt;/div&gt;\n{% endblock %}\n</code></pre> <p>Tags will have random colors, to easily disguise them to each other. A helper <code>random_color()</code> macro that returns a random color looks like:</p> overrides\\partials\\random-colors.html<pre><code>{%- macro random_color() -%}\n{{- [\"DarkRed\",\n\"DarkGoldenrod\",\n\"DarkGreen\",\n\"DarkOliveGreen\",\n\"DarkCyan\",\n\"DarkTurquoise\",\n\"DarkBlue\",\n\"DarkMagenta\",\n\"DarkViolet\",\n\"DarkSlateBlue\",\n\"DarkOrchid\",\n\"DarkSlateGray\"] | random -}}\n{%- endmacro -%}\n</code></pre> <p>Then it can be imported and used:</p> <pre><code>{% from \"partials/random-colors.html\" import random_color %}\n\n&lt;span style=\"color:{{ random_color() }};\"&gt;tag&lt;/span&gt;\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#tag-cloud","title":"Tag cloud","text":"<p>The tag cloud shows all tags in different size and color. The bigger a tag is, the more pages mention that tag. Steps to make a tag cloud:</p> <ol> <li> <p>Scan all pages and create a list of pairs <code>(tag, pages[])</code>.</p> </li> <li> <p>Count the number of pages for each tag then show each tag with different text size and color using <code>font-size</code> and <code>color</code> attributes.</p> </li> </ol> overrides\\partials\\tag-cloud.html<pre><code>{% from \"partials/colors.html\" import color %}\n\n{% set tags=[] %}\n\n{# scan all pages #}\n{% for p in pages %}\n{% if p.page.meta.tags %}\n{# extract tags if available #}\n{% for tag in p.page.meta.tags %}\n{% if tags|length %}\n{% set ns = namespace(found=False) %}\n{# read more about scope at \n        https://jinja.palletsprojects.com/en/2.11.x/templates/#assignments\n        #}\n{# check if tag exists, append to its page list #}\n{% for item in tags %}\n{% set t, ps = item %}\n{% if tag == t %}\n{% set ns.found = True %}\n{# use \"\" to not add spaces in content #}\n{{ ps.append(p.page) or \"\" }}\n{% endif %}\n{% endfor %}\n{# if tag doesn't exist, create new page list#}\n{% if not ns.found %}\n{{ tags.append((tag, [p.page])) or \"\" }}\n{% endif %}\n{% else %}\n{{ tags.append((tag, [p.page])) or \"\" }}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n\n&lt;style&gt;\n    .tag-cloud {\n        margin-top:0;\n        margin-bottom: 0.5em;\n    }\n    .tag-cloud-content {\n        padding: 0 0.6rem;\n{% if page.url == 'tags/' %}\n        text-align: center;\n{% endif %}\n    }\n&lt;/style&gt;\n\n&lt;p class=\"md-nav tag-cloud\"&gt;\n  &lt;label class=\"md-nav__title\"&gt;Tag cloud&lt;/label&gt;\n&lt;/p&gt;\n&lt;div class=\"tag-cloud-content\"&gt;\n{% if tags|count %}\n{% for item in tags %}\n{% set tag, ps = item %}\n{# create a link with tag name #}\n{# font size is based on the page count #}\n            &lt;a class=\"tag\" href=\"{{ config.site_url }}tags/#{{ tag }}\"&gt;\n                &lt;span class=\"tag-name\" style=\"\n{% set sz = ps|count %}\n{% if sz &gt; 10 %}\n{% set sz = 10 %}\n{% endif %}\n{% if page.url == 'tags/' %}\n                        font-size:{{ 1+sz*0.05}}rem;\n{% else %}\n                        font-size:{{ 0.5+sz*0.05}}rem;\n{% endif %}\n                    color:{{ color( loop.index%12) }};\n                \"&gt;\n{{- tag -}} &amp;nbsp;\n                &lt;/span&gt;\n                &lt;!--&lt;sup class=\"tag-count\"&gt;{{- ps|count -}}&lt;/sup&gt;--&gt;\n            &lt;/a&gt;\n{% endfor %}\n{% else %}\n        &lt;p&gt;\n            No tag found!\n        &lt;/p&gt;\n{% endif %}\n&lt;/div&gt;\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#page-list","title":"Page list","text":"<p>This section is simple as it just needs to loop through the list of pairs <code>(tag, pages[])</code> and create a link to each page. Steps to take that:</p> <ol> <li> <p>Scan all pages and create a list of pairs <code>(tag, pages[])</code>.</p> </li> <li> <p>Show each tag with the list of pages in a collapsible <code>&lt;details&gt;</code> block.</p> </li> <li> <p>Only one tag block is open at a time to easily follow the selected tag. To do this, I added a callback of the <code>toggle</code> event on all tag blocks. Whenever a block is opened, this script will close all others.</p> </li> <li> <p>A tag block can be opened via URL with hash being the selected tag.</p> </li> </ol> overrides\\partials\\tag-page-list.html<pre><code>{% set tags=[] %}\n\n{# scan all pages #}\n{% for p in pages %}\n{% set pg = p.page %}\n{% set hidden = true if (pg.meta and pg.meta.hide and ('in_recent_list' in pg.meta.hide)) %}\n{% if pg.meta.tags and not hidden %}\n{# extract tags if available #}\n{% for tag in pg.meta.tags %}\n{% if tags|length %}\n{% set ns = namespace(found=False) %} {# read more about scope at\n        https://jinja.palletsprojects.com/en/2.11.x/templates/#assignments \n        #}\n{# check if tag exists, append to its page list #}\n{% for item in tags %}\n{% set t, ps = item %}\n{% if tag == t %}\n{% set ns.found = True %}\n{# use \"\" to not add spaces in content #}\n{{ ps.append(pg) or \"\" }}\n{% endif %}\n{% endfor %}\n{# if tag doesn't exist, create new page list#}\n{% if not ns.found %}\n{{ tags.append((tag, [pg])) or \"\" }}\n{% endif %}\n{% else %}\n{{ tags.append((tag, [pg])) or \"\" }}\n{% endif %}\n{% endfor %}\n{% endif %}\n{% endfor %}\n\n&lt;style&gt;\n    .md-typeset .tag summary::before {\n        height: 1rem;\n        width: 1rem;\n        margin-top: 0.25em;\n    }\n&lt;/style&gt;\n&lt;div class=\"tag-page-list\"&gt;\n{% for item in tags %}\n{% set tag, ps = item %}\n    &lt;details class=\"tag\" id={{ tag }}&gt;\n      &lt;summary&gt;\n{{- tag }} ({{- ps|count -}})\n        &lt;a class=\"headerlink\" href=\"#{{ tag }}\"&gt;\u2693\ufe0e&lt;/a&gt;\n      &lt;/summary&gt;\n      &lt;ol&gt;\n{% for p in ps %}\n        &lt;li&gt;\n          &lt;a href=\"{{ p.canonical_url }}\"&gt;\n{%- if p.meta and p.meta.title -%}\n{{- p.meta.title -}}\n{%- else -%}\n{{- p.title -}}\n{%- endif -%}\n          &lt;/a&gt;\n        &lt;/li&gt;\n{% endfor %}\n      &lt;/ol&gt;\n    &lt;/details&gt;\n{% endfor %}\n&lt;/div&gt;\n\n&lt;!-- expand page list for only selected tag --&gt;\n&lt;script&gt;\n  [...document.getElementsByTagName(\"details\")].forEach((D, _, A) =&gt; {\n    D.open = false\n    D.addEventListener(\"toggle\", E =&gt;\n      D.open &amp;&amp; A.forEach(d =&gt;\n        d != E.target &amp;&amp; (d.open = false)\n      )\n    )\n  }\n  )\n\n  var hash = window.location.hash.substr(1);\n  if (hash) {\n    document.getElementById(hash).open = true;\n  }\n&lt;/script&gt;\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#main-template","title":"Main template","text":"<p>The <code>main.html</code> file, extending the <code>base.html</code> template, will be used for all markdown pages, and it is the starting point to add custom template.</p> <p>To override it, add the <code>main.html</code> file in the <code>overrides</code> folder. Here are things I\u2019m going to do to add more content into a blog post:</p> <ol> <li> <p>Extract metadata to get <code>title</code>, <code>description</code>, <code>tags</code>, and other information.</p> </li> <li> <p>Add block to use the Open Graph protocol to show the page\u2019s information when a user shares a page on a social network.</p> </li> <li> <p>Include modified Navigation section to show Tag cloud in either left or right panel.</p> </li> <li> <p>Include modified Page Content which renders the content with additional sections (cover, table of content, main content, comments.).</p> </li> </ol> overrides\\main.html<pre><code>{# page info #}\n{% set page_title = '' %}\n{% if page and page.meta and page.meta.title %}\n{% set page_title = page.meta.title %}\n{% elif page and page.title and not page.is_homepage %}\n{% set page_title = page.title %}\n{% endif %}\n\n{% if page.markdown == '' and page.parent.children %}\n{% if page and page.meta and page.meta.title %}\n{% set page_title = page.meta.title %}\n{% else %}\n{% set page_title = page.parent.title  %}\n{% endif %}\n{% endif %}\n\n{% set page_description = '' %}\n{% if page and page.meta and page.meta.description %}\n{% set page_description = page.meta.description %}\n{% elif page and page.description and not page.is_homepage %}\n{% set page_description = page.description %}\n{% endif %}\n\n{% set page_url = page.canonical_url %}\n\n{% set page_image = config.site_url ~ \"assets/banner.jpg\" %}\n{% if page and page.meta and page.meta.banner %}\n{% set page_image = page.canonical_url ~ page.meta.banner %}\n{% endif %}\n\n{% if page and page.meta and page.meta.tags %}\n{% set page_tags = page.meta.tags %}\n{% endif %}\n\n{# template #}\n{% extends \"base.html\" %}\n\n{# title #}\n{% block htmltitle %}\n    &lt;title&gt;{{ page_title }} - {{ config.site_name }}&lt;/title&gt;\n{% endblock %}\n\n{# sharing #}\n{% block extrahead %}\n{% include \"partials/ads.html\" %}\n    &lt;!-- Open Graph --&gt;\n    &lt;meta property=\"og:type\" content=\"website\" /&gt;\n    &lt;meta property=\"og:title\" content=\"{{ page_title }} - {{ config.site_name }}\" /&gt;\n    &lt;meta property=\"og:description\" content=\"{{ page_description }} - {{ config.site_description }}\" /&gt;\n    &lt;meta property=\"og:url\" content=\"{{ page_url }}\" /&gt;\n    &lt;meta property=\"og:image\" content=\"{{ page_image }}\" /&gt;\n    &lt;meta property=\"og:image:type\" content=\"image/png\" /&gt;\n    &lt;meta property=\"og:image:width\" content=\"1200\" /&gt;\n    &lt;meta property=\"og:image:height\" content=\"630\" /&gt;\n\n    &lt;!-- Twitter Cards --&gt;\n    &lt;meta name=\"twitter:card\" content=\"summary_large_image\" /&gt;\n    &lt;meta name=\"twitter:title\" content=\"{{ page_title }} - {{ config.site_name }}\" /&gt;\n    &lt;meta name=\"twitter:description\" content=\"{{ page_description }} - {{ config.site_description }}\" /&gt;\n    &lt;meta name=\"twitter:image\" content=\"{{ page_image }}\" /&gt;\n{% endblock %}\n\n{# navigation #}\n{% block site_nav %}\n{% include \"partials/navigation.html\" %}\n{% endblock %}\n\n{# content #}\n{% block content %}\n{% include \"partials/post-content.html\" %}\n{% endblock %}\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#navigation","title":"Navigation","text":"<p>The sidebar will display the tag cloud based in the page\u2019s table of content.</p> overrides\\partials\\navigation.html<pre><code>{% if nav %}\n{% if page.meta and page.meta.hide %}\n{% set hidden = \"hidden\" if \"navigation\" in page.meta.hide %}\n{% endif %}\n\n    &lt;div class=\"md-sidebar md-sidebar--primary\" data-md-component=\"sidebar\" data-md-type=\"navigation\" {{ hidden }}&gt;\n        &lt;div class=\"md-sidebar__scrollwrap\"&gt;\n            &lt;div class=\"md-sidebar__inner\"&gt;\n{% include \"partials/nav.html\" %}\n\n{# show tags on the left side if the right side has toc #}\n{% if page.toc %}\n                    &lt;br&gt;\n                    &lt;br&gt;\n                    &lt;div class=\"tag-cloud-nav\"&gt;\n{% include \"partials/tag-cloud.html\" %}\n                    &lt;/div&gt;\n{% endif %}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n{% endif %}\n\n{% if not \"toc.integrate\" in features %}\n{% if page.meta and page.meta.hide %}\n{% set hidden = \"hidden\" if \"toc\" in page.meta.hide %}\n{% endif %}\n\n    &lt;div class=\"md-sidebar md-sidebar--secondary\" data-md-component=\"sidebar\" data-md-type=\"toc\" {{ hidden }}&gt;\n        &lt;div class=\"md-sidebar__scrollwrap\"&gt;\n            &lt;div class=\"md-sidebar__inner\"&gt;\n{% if not page.is_homepage %}\n{% include \"partials/toc.html\" %}\n{% endif %}\n\n{# show tags on the right side if there is no toc there #}\n{% if page.is_homepage or not page.toc %}\n                    &lt;div class=\"tag-cloud-toc\"&gt;\n{% include \"partials/tag-cloud.html\" %}\n                    &lt;/div&gt;\n{% endif %}\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n{% endif %}\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#page-content","title":"Page content","text":"<p>The page content will be placed in the main block. If there is no content, a list of children posts will be shown.</p> overrides\\partials\\post-content.html<pre><code>{# edit button #}\n{% if page.edit_url %}\n    &lt;a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"&gt;\n{% include \".icons/material/pencil.svg\" %}\n    &lt;/a&gt;\n{% endif %}\n\n{% include \"partials/post-cover.html\" %}\n\n&lt;hr class=\"screen-only\"&gt;\n\n{% include \"partials/post-toc.html\" %}\n\n{# show the children pages if no content #}\n{% if page.markdown == '' and page.parent.children %}\n    &lt;h2&gt;Posts in this section:&lt;/h2&gt;\n    &lt;ol&gt;\n{% for obj in page.parent.children %}\n{% if obj.is_section %}\n{% set p = obj.children[0] %}\n                &lt;li&gt;\n                    &lt;a href=\"{{ p.canonical_url }}\"&gt;\n{%- if p.meta and p.meta.title -%}\n{{- p.meta.title -}}\n{%- else -%}\n{{- p.title -}}\n{%- endif -%}\n                    &lt;/a&gt;\n                &lt;/li&gt;\n{% endif %}\n{% endfor %}\n    &lt;/ol&gt;\n{% else %}\n{# content #}\n{{ page.content }}\n{% endif %}\n\n{% if page.markdown == '' and page.parent.children %}\n{% else %}\n{# comment #}\n{% include \"partials/disqus.html\" %}\n{% endif %}\n</code></pre> <p>When printing to a PDF file, the first page should show the post title and its short description. This page is called the cover page which will be created only in printing mode.</p> <p>Create an element with class <code>cover</code> in the <code>post-cover.html</code> template to wrap the cover section. In print mode, this element should cover the full height (100%) of the first paper and align its content vertically. After the line of tags, the updated date will be shown to easily check the latest version of the document:</p> overrides\\partials\\post-cover.html<pre><code>{# the cover page #}\n&lt;style&gt;\n    .md-typeset .cover {\n        margin-bottom: 1em;\n    }\n    .md-typeset .page-category {\n        color: gray;\n        font-size: large;\n    }\n    .md-typeset .page-title {\n        margin-left: -0.0625em;\n    }\n    .md-typeset .page-extra {\n        color: gray;\n        font-size: small;\n    }\n    .md-typeset .page-tags {\n        margin: 0;\n    }\n    .md-typeset .page-date {\n        margin: 0;\n        text-align: end;\n    }\n    @media print {\n        .md-typeset .cover {\n            height: 100vh;\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n        }\n        .md-typeset .cover + * {\n            margin-top: 0;\n        }\n    }\n&lt;/style&gt;\n\n&lt;div class=\"cover\"&gt;\n{# category #}\n{% if page.meta and page.meta.category %}\n    &lt;span class=\"page-category\"&gt;\n{{ page.meta.category }} \u00bb\n    &lt;/span&gt;\n    &lt;br&gt;\n{% endif %}\n\n{# title #}\n    &lt;h1 class=\"page-title\"&gt; {{ page_title | d(config.site_name, true) }} &lt;/h1&gt;\n\n{# description #}\n{% if page.meta and page.meta.description %}\n        &lt;p class=\"page-description\"&gt;\n{{ page.meta.description }}\n        &lt;/p&gt;\n{% endif %}\n\n{% if page.markdown == '' and page.parent.children %}\n\n{% else %}\n        &lt;div class=\"page-extra row\"&gt;\n            &lt;div class=\"col\"&gt;\n{% if page.meta and page.meta.tags %}\n                &lt;p class=\"page-tags\"&gt;\n{% for tag in page.meta.tags %}\n                        &lt;a class=\"tag\" href=\"{{ config.site_url }}tags/#{{tag}}\"&gt;\n                            &lt;span class=\"tag-name\"&gt;\n                                #{{ tag }} &amp;nbsp;\n                            &lt;/span&gt;\n                        &lt;/a&gt;\n{% endfor %}\n                &lt;/p&gt;\n{% endif %}\n\n            &lt;/div&gt;\n            &lt;div class=\"col\"&gt;\n                &lt;p class=\"page-date\"&gt;\n                    &lt;span&gt;\n{% if page.meta.git_revision_date_localized_raw_iso_date %}\n{{ lang.t(\"source.file.date.updated\") }}:\n{{ page.meta.git_revision_date_localized_raw_iso_date }}\n{% endif %}\n                    &lt;/span&gt;\n                &lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n{% endif %}\n&lt;/div&gt;\n</code></pre> <p>When displaying on a screen, the Table of Content is displayed in the right sidebar. In printed pages, there should be a page to display the table of content too. This page is also only visible in printing.</p> <p>The base Material for MkDocs theme has a partial block for Table of Content section, so I just need to declare it in <code>post-toc.html</code> and include it in the <code>main.html</code> template, between the cover page and the main content.</p> overrides\\partials\\post-toc.html<pre><code>{# the table of content page #}\n&lt;style&gt;\n    .md-typeset .toc {\n        display: none;\n    }\n    .md-typeset .toc label {\n        display: none;\n    }\n    .md-typeset .toc .md-nav {\n        font-size: unset;\n        line-height: 1.6;\n    }\n    .md-typeset .toc .md-nav--secondary {\n        margin-left: -2em;\n    }\n    .md-typeset .toc .md-nav__list {\n        margin: 0;\n    }\n    .md-typeset .toc ul {\n        list-style: none;\n    }\n    @media print {\n        .md-typeset .toc {\n            display: block;\n            page-break-after: always;\n        }\n        .md-typeset .toc .md-nav__link {\n            color: var(--md-typeset-a-color);\n        }\n        .md-typeset .toc .md-nav__link.md-nav__link--active {\n            font-weight: unset;\n        }\n        .md-typeset .toc + * {\n            margin-top: 0;\n        }\n    }\n&lt;/style&gt;\n\n&lt;div class=\"toc\"&gt;\n    &lt;h2&gt;Table of Content&lt;/h2&gt;\n{% include \"partials/toc.html\" %}\n&lt;/div&gt;\n</code></pre> <p>Jinja object</p> <p>It is easy to display an object in Jinja template as Jinja is based on Python.</p> <p>To show all attributes:</p> <pre><code>{{ page.__dict__}}\n</code></pre> <p>To show a specific attribute:</p> <pre><code>{{ page.parent.children }}\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#the-recent-blog-posts","title":"The recent blog posts","text":"<p>There should be a page showing the recent posts to help users see what is new and updated. With the Revision Date plugin, it is able to use two new meta-data fields: <code>git_revision_date_localized</code>, and <code>git_creation_date_localized</code> if the option <code>enable_creation_date</code> is <code>true</code>.</p> <p>Create new <code>index.md</code> file inside the <code>blog</code> folder. When using the Section Index plugin, this index file will be merged to the Blog section, therefore, when user selects the Blog label, there is a list of recent posts will be shown.</p> docs\\blog\\index.md<pre><code>---\ntitle: Recent posts\ndescription: The lastest activities show in the list of recently updated post. Please read the post title and description and choose any post which seems interesting to you. I hope you always can find something new here.\ntemplate: blog.html\ndisqus: \"\"\n---\n</code></pre> <p>This page will use the <code>blog.html</code> template in which it scans all posts and check the creation date to make a list of posts. Each post should be displayed in a container and be formatted to show the title, the description (at most 250 character using the <code>truncate</code> filter), the creation date, and its tags.</p> <p>Here is the code to sort all pages in order of creation date, and then filter all blog posts to save into the array <code>blog_pages</code> which will be used to generate content.</p> <pre><code>{% set blog_pages=[] %}\n\n{% for p in pages|sort(     \n    attribute='page.meta.git_revision_date_localized',\n    reverse=True\n    ) \n%}\n\n{% set pg = p.page %}\n\n{# do not list homepage, empty pages, hidden pages #}\n{% set hidden = true if (pg.meta and pg.meta.hide and ('in_recent_list' in pg.meta.hide)) %}\n{% if (not pg.is_homepage) and \n            (not pg.markdown == '') and \n                (not hidden)\n    %}\n{{ blog_pages.append(pg) or \"\" }} {# use \"\" to not add spaces in content #}\n{% endif %}\n{% endfor %}\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#groups-of-pages","title":"Groups of pages","text":"<p>When the number of posts goes bigger, the recent post list becomes longer. It\u2019s time to brake the long list into pages \u2014 the user can click on the page number to see its children posts.</p> <p>This is called \u201cPagination\u201d. How to implement it?</p> <p>Jinja template has the <code>slice</code> filter to divide a list into sub-lists. Here, I\u2019d like to have maximum of 10 posts on each page.</p> <pre><code>{# count the number of pages #}\n{% set page_num = (blog_pages|count / 10)|round(method='ceil')|int %}\n\n&lt;div id=\"page_num\" data-value=\"{{page_num}}\"&gt;&lt;/div&gt;\n\n&lt;div class=\"pages\"&gt;\n    {% for pg_group in blog_pages|slice(page_num) %}\n    &lt;div class=\"page\" id=\"page{{ loop.index }}\"&gt;\n        {% for pg in pg_group %}\n            &lt;div class=\"post\"&gt;\n                ... create post layout and content ...\n            &lt;/div&gt;\n        {% endfor %}\n    &lt;/div&gt;\n{% endfor %}\n&lt;/div&gt;\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#post-entry","title":"Post-entry","text":"<p>Each post is wrapped inside a <code>&lt;div class=\"post\"&gt;</code> and its elements are marked with different classes, such as <code>post-title</code>, <code>post-description</code>, etc. for applying styles later.</p> <pre><code>&lt;div class=\"post\"&gt;\n    &lt;h4 class=\"post-title\"&gt;\n        &lt;a href=\"{{ pg.canonical_url }}\"&gt;{{ pg.title }}&lt;/a&gt;\n    &lt;/h4&gt;\n    &lt;div class=\"post-info\"&gt;\n        &lt;div&gt;\n            &lt;p class=\"post-description\"&gt;\n                {% if pg.meta and pg.meta.description %}\n                {{ pg.meta.description | truncate(200) }}\n                {% endif %}\n            &lt;/p&gt;\n            &lt;div class=\"post-extra row\"&gt;\n                &lt;div class=\"col\"&gt;\n                    {% if pg.meta and pg.meta.git_revision_date_localized %}\n                    &lt;p class=\"post-date\"&gt;\n                        &lt;span&gt;\n                            {{ pg.meta.git_revision_date_localized }}\n                        &lt;/span&gt;\n                    &lt;/p&gt;\n                    {% endif %}\n                &lt;/div&gt;\n                &lt;div class=\"col\"&gt;\n                    {% if pg.meta and pg.meta.tags %}\n                    &lt;p class=\"post-tags\"&gt;\n                        {% for tag in pg.meta.tags %}\n                        &lt;a class=\"tag\" href=\"{{ config.site_url }}tags/#{{tag}}\"&gt;\n                            &lt;span class=\"tag-name\" style=\"color:{{ random_color() }};\"&gt;\n                                #{{ tag }}\n                            &lt;/span&gt;\n                        &lt;/a&gt;\n                        {% endfor %}\n                    &lt;/p&gt;\n                    {% endif %}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        {% if pg_image %}\n        &lt;img class=\"post-banner \"src='{{ pg_image }}'/&gt;\n        {% endif %}\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Here is a simple style to make each post display necessary basic information:</p> <pre><code>.md-typeset .post {\nmargin-bottom: 1rem;\n}\n.md-typeset .post .post-title {\nmargin: 0.25rem 0;\ntext-decoration: none;\nfont-size: 1.3em;\n}\n.md-typeset .post .post-info {\ndisplay: flex;\n}\n.md-typeset .post .post-banner {\nmargin-top: -1rem;\nmax-height: 6rem;\nborder: 1px solid lightgray;\n}\n.md-typeset .post .post-description {\nmargin: 0 1rem 0 0;\n}\n.md-typeset .post .post-extra {\nmargin: 0.5rem 1rem 0 0;\n\ncolor: darkgray;\n}\n.md-typeset .post .post-tags {\nmargin: 0;\ntext-align: end;\n}\n.md-typeset .post .post-date {\nmargin: 0;\n}\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#pagination-bar","title":"Pagination bar","text":"<p>To show the current active page, I use pure CSS and JavaScript. The idea is to use the URL hash to detect which page is activated, such as <code>#page1</code>.</p> <pre><code>{# pagination #}\n&lt;div class=\"pages\"&gt;\n    {% for pg_group in blog_pages|slice(page_num) %}\n        &lt;div class=\"page\" id=\"page{{ loop.index }}\"&gt;\n            {% for pg in pg_group %}\n                {% set pg_image = \"\" %}\n                {% if pg.meta and pg.meta.banner %}\n                    {% set pg_image = pg.canonical_url ~ pg.meta.banner %}\n                {% endif %}\n                &lt;div class=\"post\"&gt;\n                    ...\n                &lt;/div&gt;\n            {% endfor %}\n        &lt;/div&gt;\n    {% endfor %}\n&lt;/div&gt;\n\n&lt;hr&gt;\n\n&lt;div class=\"center\"&gt;\n    &lt;div class=\"pagination\" id=\"pagination-bottom\"&gt;\n        &lt;!-- &lt;a href=\"#\"&gt;&amp;laquo;&lt;/a&gt; --&gt;\n        {% for pg_group in blog_pages|slice(page_num) %}\n        &lt;a class=\"page-number {% if loop.index==1 %}active{% endif%}\" href=\"#page{{ loop.index }}\"&gt;{{ loop.index }}&lt;/a&gt;\n        {% endfor %}\n        &lt;!-- &lt;a href=\"#\"&gt;&amp;raquo;&lt;/a&gt; --&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;hr&gt;\n\n&lt;p class=\"center\"&gt;Total &lt;b&gt;{{ blog_pages|count }}&lt;/b&gt; posts in {{ page_num }} pages.&lt;/p&gt;\n</code></pre> <p>Then add some styles to the pagination block and its children links:</p> <p> CSS Styles:</p> <p>Use <code>target</code> keyword to select the selected page ID, then show only the target element.</p> <pre><code>.md-typeset .pages &gt; .page:target ~ .page:last-child,\n.md-typeset .pages &gt; .page {\ndisplay: none;\n}\n.md-typeset .pages &gt; :last-child,\n.md-typeset .pages &gt; .page:target {\ndisplay: block;\n}\n</code></pre> <p>JavaScript</p> <p>When the page is loaded, a script will run to get all pagination\u2019s links, and then add a callback function for click event, that remove <code>active</code> class from last activated element and then assign <code>active</code> class to the event\u2019s source element. Note that the first page is activated by default when the page is loaded. After a page is selected, function <code>scrollToTop()</code> will navigate to the top view.</p> overrides\\partials\\post-list.html<pre><code>&lt;script&gt;\nfunction scrollToTop() {\n// delay a little for css to calculate windows size\nsetTimeout(function () {\nwindow.scrollTo(0, 0);\n}, 100);\n}\n\nfunction activatePaginationLinks(name) {\nvar pagination = document.getElementById(\"pagination-\"+name);\nif (pagination) {\nvar links = pagination.getElementsByClassName(\"page-number\");\nif (links.length) {\nfor (var i = 0; i &lt; links.length; i++) {\nif (links[i].getAttribute(\"href\") == window.location.hash) {\nlinks[i].classList.add(\"active\");\n} else {\nlinks[i].classList.remove(\"active\")\n}\n}\n}\n}\n}\n\n// show page 1 as default\nwindow.location.hash = \"#page1\";\n\n// listen to hash change\nwindow.onhashchange = function() {\nvar hash = window.location.hash;\nconst regexp = /^#page[0-9]+$/;\nif (regexp.test(hash)) {\nvar num = parseInt(hash.substr(5));\nvar max = parseInt(document.getElementById('page_num').dataset.value);\nif(num &gt;= 1 &amp;&amp; num &lt;= max) {\nactivatePaginationLinks(\"top\");\nactivatePaginationLinks(\"bottom\");\nscrollToTop();\nreturn;\n}\n} window.location.hash = \"#page1\";\n}\n&lt;/script&gt;\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#zoom-in-images","title":"Zoom-in Images","text":"<p>As mentioned in the Images section, view-bigimg library helps to zoom and pan images. It\u2019s useful when the image is in high resolution and resized to fit site\u2019s width.</p> <p>Download <code>view-bigimg.css</code> and <code>view-bigimg.js</code> files from the view-bigimg repo, then add them into the addition assets configs in <code>mkdocs.yml</code>:</p> <pre><code>extra_css:\n- assets/view-bigimg.css\nextra_javascript:\n- assets/view-bigimg.js\n</code></pre> <p>When click on the image, this library will create a new layer and show the image in a bigger size. However, it must be clicked on the close button to go back to the page\u2019s content. I want to simplify this step by just click on the image. Panning still is activated by press and hold. Therefore, I write a function to detect <code>mousedown</code> and <code>mousemove</code> event, then only close the image if it is a simple click:</p> assets\\extra.js<pre><code>var dragged = false;\ndocument.addEventListener(\"mousedown\", () =&gt; (dragged = false));\ndocument.addEventListener(\"mousemove\", () =&gt; (dragged = true));\n\nvar viewer = new ViewBigimg();\nvar figures = document.querySelectorAll(\"img\");\nfor (var i = 0; i &lt; figures.length; i++) {\nfigures[i].onclick = (e) =&gt; {\nif (e.target.nodeName === \"IMG\") {\nviewer.show(e.target.src);\n}\n};\n}\nvar containers = document.querySelectorAll(\"#iv-container .iv-image-view\");\nfor (var i = 0; i &lt; containers.length; i++) {\ncontainers[i].onclick = () =&gt; {\nif (!dragged) {\nviewer.hide();\n}\n};\n}\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/add-new-features/#open-external-links","title":"Open external links","text":"<p>When following links, to remain the blog page opened, external links should be shown in new tabs without any tracking information. To do that, I write some lines of code to get all external links in the page, then set <code>target = \"_blank\"</code> and add attribute <code>rel = \"noopener noreferrer\"</code> to them.</p> assets\\extra.js<pre><code>/* open external links in new tab */\nvar links = document.links;\nfor (var i = 0, linksLength = links.length; i &lt; linksLength; i++) {\nif (links[i].hostname != window.location.hostname) {\nlinks[i].target = \"_blank\";\nlinks[i].setAttribute(\"rel\", \"noopener noreferrer\");\nlinks[i].className += \" externalLink\";\n} else {\nlinks[i].className += \" localLink\";\n}\n}\n</code></pre>","tags":["jinja","javascript"]},{"location":"blog/site-setup/create-site-project/","title":"A Guide to Create a Personal Site","text":"","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#material-for-mkdocs","title":"Material for MkDocs","text":"<p>A personal site is usually a static site which has pre-built contents. A static site generator is a tool that generates a full static HTML website based on raw data and a set of templates. Visit the list of Site Generators to see available tools.</p> <p>MkDocs is a fast and simple engine to build a site for project documentation. Content source files are written in Markdown format, and the site is configured with a single YAML config file.</p> <p>Material for MkDocs is a popular theme for MkDocs. It has a simple and clear layout with a bunch of useful features, such as better navigation behaviors, strongly integrated Markdown extensions, and some additional tweaks. This project has a paid version called Insiders, but the free version is perfectly enough for a personal use.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#installation","title":"Installation","text":"<p>Steps to install and create a new site:</p> <ol> <li> <p>Download and install Python 3.</p> </li> <li> <p>Create a new folder to store the project:</p> <pre><code>mkdir CodeInsideOut\ncd CodeInsideOut\n</code></pre> <p>It\u2019s recommended to use a virtual environment to isolate this project with others from a possible package conflict.</p> <pre><code>python -m venv .venv\n</code></pre> <p>Then activate the virtual environment:</p> WindowsLinux <pre><code>.venv\\Scripts\\activate.bat\n</code></pre> <pre><code>.venv/Scripts/activate\n</code></pre> <p>Remember to run this command every time you come back to work in this project.</p> </li> <li> <p>Install Material for MkDocs package. Read more at getting started:</p> <pre><code>pip install mkdocs-material\n</code></pre> </li> <li> <p>Start a new site:</p> <pre><code>mkdocs new .\n</code></pre> <p>This will create the following file structure:</p> <pre><code>.\n\u251c\u2500 mkdocs.yml    # The configuration file\n\u2514\u2500 docs/         # Other markdown pages\n\u251c\u2500 index.md  # The documentation homepage\n\u2514\u2500 ...       # Other files\n</code></pre> </li> <li> <p>Enable Material for MkDocs theme by adding a config into <code>mkdocs.yml</code>:</p> <pre><code>theme:\nname: material\n</code></pre> </li> <li> <p>Run a local server, and preview the site at http://localhost:8000 to see the default homepage:</p> <pre><code>mkdocs serve\n</code></pre> </li> <li> <p>To publish the site, build it first:</p> <pre><code>mkdocs build\n</code></pre> <p>Then copy all the content in the <code>site</code> folder to the website\u2019s root folder.</p> </li> </ol>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#working-folder","title":"Working folder","text":"<p>Each Markdown file inside the folder <code>docs</code> will be rendered as a page of the site. The index page is located at <code>docs\\index.md</code>. Sub-folders are used as the path to a group of related posts.</p> <p>If a post is named other than <code>index.md</code>, the filename will be used as the directory path of the generated page. Here is how MkDocs generates URLs for Markdown posts:</p> <ul> <li> <p>folder <code>docs</code> becomes the root of the site www.site.com/</p> </li> <li> <p>file <code>docs\\blog\\post.md</code> becomes the link www.site.com/blog/post/</p> </li> <li> <p>file <code>docs\\blog\\post\\index.md</code> also becomes the link www.site.com/blog/post/</p> </li> </ul> <p>Use hyphen (<code>-</code>) in folder name and file name to create good URLs. Some tips here.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code is a lightweight but powerful source code editor. It well supports users to write code, documents, notes. This editor also have some extensions to turn it into a full-feature IDE.</p> <p>Useful extensions for writing in Markdown format and editing HTML template:</p> <ul> <li> <p>Markdown All in One: add keyboard shortcuts, auto-completion, edit and format list and table.</p> </li> <li> <p>Markdown Paste: paste images, links from the clipboard.</p> </li> <li> <p>Prettier \u2014 Code formatter: a formatter which supports a lot of languages.</p> </li> <li> <p>Draw.io Integration: edit diagrams and SVG images.</p> </li> <li> <p>LTeX: Grammar/spell checker using LanguageTool with support for LaTeX, Markdown, and others.</p> </li> </ul> <p>Additional extensions:</p> <ul> <li> <p>Jinja: highlight Jinja syntax in HTML templates.</p> </li> <li> <p>Sublime Text Key map and Settings Importer: import keybindings and settings.</p> </li> </ul> <p> Writing a post using Visual Studio Code </p>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#basic-configuration","title":"Basic Configuration","text":"<p>All configurations are declared in the config file <code>mkdocs.yml</code> at the root of the project folder. Here are some main settings to quickly customize your site:</p>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#site-information","title":"Site Information","text":"<p>Site information consists of the name, the URL, the title, a description and some keywords that are used to get brief information about the content of the site. The copyright word should include a link to the original theme when you use the free version.</p> <pre><code>site_name: Code Inside Out\nsite_url: https://www.codeinsideout.com/ # must have the trailing slash\nsite_author: V\u0169 Quang Tr\u1ecdng (vuquangtrong@gmail.com)\nsite_description: Guides, notes and useful stuff for learning embedded systems.\ncopyright: &gt; # should remain a link to the original theme\n&amp;copy; 2021 Code Inside Out&lt;br&gt;\n&lt;a href=\"https://github.com/vuquangtrong/mkdocs-material-blog\"&gt;Blog Theme&lt;/a&gt; /\n&lt;a href=\"https://squidfunk.github.io/mkdocs-material/\"&gt;Material for MkDocs&lt;/a&gt;\n</code></pre> <p>The social links in the footer can be added in the <code>extra</code> section.</p> <pre><code>extra:\nsocial:\n- icon: fontawesome/brands/github-alt\nlink: https://github.com/vuquangtrong\nname: vuquangtrong\n- icon: fontawesome/brands/facebook-f\nlink: https://facebook.com/trongvq\nname: trongvq\n- icon: fontawesome/brands/linkedin-in\nlink: https://www.linkedin.com/in/vqtrong\nname: vqtrong\ngenerator: false # hide the line \"Made with Material for MkDocs\"\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#appearance","title":"Appearance","text":"<p>The theme can be customized by changing below options:</p>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#colors","title":"Colors","text":"<p>Changing color is to select colors for 2 main groups:</p> <ul> <li>The primary color which is used for the header, the sidebar, text links and several other components.</li> <li>The accent color which is used to denote elements that can be interacted with, e.g. hovered links, buttons and scroll-bars.</li> </ul> <pre><code>theme:\npalette:\nprimary: white\naccent: deep orange\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#fonts","title":"Fonts","text":"<p>Serif fonts1 are widely used for body text because they are considered to be easier to read than Sans-Serif fonts in print.</p> <p>For better reading, distinguishing the digit zero <code>0</code> from the Latin script letter Oh <code>o</code> or <code>O</code> is a way to avoid mistake, especially while reading technical notes. Fonts for source code do have slashed/ dotted/ open zero2, but fonts for reading don\u2019t have those styles.</p> <p>It\u2019s also needed to clearly distinguish the digit one <code>1</code> with lowercase <code>i</code>, the uppercase <code>I</code>, and the lowercase <code>l</code>. Luckily, they usually do not stand close to each other.</p> <p>To replace the defaults fonts, this site uses Noto Serif for the body text, and Roboto Mono for the code block.</p> <pre><code>theme:\nfont:\ntext: Noto Serif\ncode: Roboto Mono\n</code></pre> <p>Can you easily read below pairs of characters?</p> <ul> <li>Body text: 0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL</li> <li>Code block: <code>0o 0O oO 1i 1I 1l 1L iI il iL Il IL lL</code></li> </ul>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#icons","title":"Icons","text":"<p>Icons can be selected in built-in icon packs, such as . It can be an image also.</p> <pre><code>theme:\nicon:\nlogo: fontawesome/solid/code\nfavicon: favicon.png\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#navigation","title":"Navigation","text":"<p>A clear and concise navigation structure is an important aspect of good site. The layout will be 3 columns: Site Navigation, Main Content, Table of Content. Some navigation features are applied as below:</p> <pre><code>theme:\nname: material\nfeatures:\n# - navigation.instant # some features may not work properly with XHR\n- navigation.tracking # the URL changes with the active anchor\n- navigation.tabs # first top-level sections are shown as tabs\n# - navigation.tabs.sticky # tabs always show\n# - navigation.sections # sections are rendered as groups in the sidebar\n# - navigation.expand # all sections are expanded\n- navigation.indexes # link an index.md page to a section\n- navigation.top # show back-to-top button\n# - toc.integrate # show table of contents to navigation panel\n# - header.autohide\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#search","title":"Search","text":"<p>The MkDocs-based sites come with a built-in search engine, which also provides some additional features as below:</p> <pre><code>theme:\nname: material\nfeatures:\n- search.suggest # display the likeliest completion for the last word\n- search.highlight # highlight all occurrences\n- search.share # show a share button\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#content","title":"Content","text":"<p>Some extra features are enabled to render interactive elements. </p> <pre><code>theme:\nname: material\nfeatures:\n- content.code.annotate\n</code></pre> <p>When Metadata is enabled, the navigation and/or table of contents sidebars can be hidden for a document with custom front matter.</p> <pre><code>---\nhide:\n- navigation\n- toc\n- feedback\n---\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#site-analytics","title":"Site analytics","text":"<p>Material for MkDocs integrates with both, Google Analytics 4 and the now phasing out Universal Analytics.</p> <pre><code>extra:\nanalytics:\nprovider: google\nproperty: G-XXXXXXXXXX or UA-XXXXXXXX-X\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#customization","title":"Customization","text":"<p>Below are ways to customize the theme in terms of adding some extra lines of code. However, this method is quite easy even for beginners who have known some of CSS and JS.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#extra-assets","title":"Extra assets","text":"<p>Additional assets can be used to add user\u2019s stylesheets and JavaScript files. Those file should be added to the <code>docs</code> directory as below structure:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502 \u251c\u2500 assets/\n\u2502 | \u2514\u2500 extra.css\n\u2502 | \u2514\u2500 extra.js\n| \u2514\u2500 blog/\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Then, add the following line to <code>mkdocs.yml</code>:</p> <pre><code>extra_css:\n- assets/extra.css\nextra_javascript:\n- assets/extra.js\n</code></pre> <p>Use the Developer mode in your browser to inspect elements and changes their styles as your taste in <code>extra.css</code>. Add extra scripts to <code>extra.js</code> to interact with elements also.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#extend-the-theme","title":"Extend the theme","text":"<p>Extending the theme is a way to alter the HTML structure and layout. Create a new folder name <code>overrides</code> beside the <code>docs</code> folder and add below config into <code>mkdocs.yml</code>:</p> <pre><code>theme:\nname: material\ncustom_dir: overrides\n</code></pre> <p>The structure in the <code>overrides</code> directory must mirror the directory structure of the original theme, as any file in the <code>overrides</code> directory will replace the file with the same name which is part of the original theme. Besides, further assets may also be put in the <code>overrides</code> directory:</p> <pre><code>.\n\u251c\u2500 .icons/                             # Bundled icon sets\n\u251c\u2500 assets/\n\u2502  \u251c\u2500 images/                          # Images and icons\n\u2502  \u251c\u2500 javascripts/                     # JavaScript files\n\u2502  \u2514\u2500 stylesheets/                     # Style sheets\n\u251c\u2500 partials/\n\u2502  \u251c\u2500 integrations/                    # Third-party integrations\n\u2502  \u2502  \u251c\u2500 analytics/                    # Analytics integrations\n\u2502  \u2502  \u2514\u2500 analytics.html                # Analytics setup\n\u2502  \u251c\u2500 languages/                       # Translation languages\n\u2502  \u251c\u2500 content.html                     # Page content\n\u2502  \u251c\u2500 copyright.html                   # Copyright and theme information\n\u2502  \u251c\u2500 footer.html                      # Footer bar\n\u2502  \u251c\u2500 header.html                      # Header bar\n\u2502  \u251c\u2500 language.html                    # Translation setup\n\u2502  \u251c\u2500 logo.html                        # Logo in header and sidebar\n\u2502  \u251c\u2500 nav.html                         # Main navigation\n\u2502  \u251c\u2500 nav-item.html                    # Main navigation item\n\u2502  \u251c\u2500 palette.html                     # Color palette\n\u2502  \u251c\u2500 search.html                      # Search interface\n\u2502  \u251c\u2500 social.html                      # Social links\n\u2502  \u251c\u2500 source.html                      # Repository information\n\u2502  \u251c\u2500 source-file.html                 # Source file information\n\u2502  \u251c\u2500 tabs.html                        # Tabs navigation\n\u2502  \u251c\u2500 tabs-item.html                   # Tabs navigation item\n\u2502  \u251c\u2500 toc.html                         # Table of contents\n\u2502  \u2514\u2500 toc-item.html                    # Table of contents item\n\u251c\u2500 404.html                            # 404 error page\n\u251c\u2500 base.html                           # Base template\n\u2514\u2500 main.html                           # Default page\n</code></pre> <p>Overriding partials</p> <p>In order to override a partial, we can replace it with a file of the same name and location in the <code>overrides</code> directory. For example, to replace the original <code>footer.html</code> partial, create a new <code>footer.html</code> partial in the <code>overrides</code> directory:</p> <pre><code>.\n\u251c\u2500 overrides/\n\u2502  \u2514\u2500 partials/\n\u2502     \u2514\u2500 footer.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>MkDocs will now use the new partial when rendering the theme. This can be done with any file.</p> <p> Overriding blocks (recommended)</p> <p>Besides overriding partials, it\u2019s also possible to override (and extend) template blocks, which are defined inside the templates and wrap specific features. In order to set up block overrides, create a <code>main.html</code> file inside the <code>overrides</code> directory:</p> <pre><code>.\n\u251c\u2500 overrides/\n\u2502  \u2514\u2500 main.html\n\u2514\u2500 mkdocs.yml\n</code></pre> <p>Then, e.g. to override the site title, add the following lines to main.html:</p> <pre><code>{% extends \"base.html\" %}\n\n{% block htmltitle %}\n    &lt;title&gt;Lorem ipsum dolor sit amet&lt;/title&gt;\n{% endblock %}\n</code></pre> <p>The following template blocks are provided by the theme:</p> <pre><code>analytics   # Wraps the Google Analytics integration\nannounce    # Wraps the announcement bar\nconfig      # Wraps the JavaScript application config\ncontent     # Wraps the main content\ndisqus      # Wraps the Disqus integration\nextrahead   # Empty block to add custom meta tags\nfonts       # Wraps the font definitions\nfooter      # Wraps the footer with navigation and copyright\nheader      # Wraps the fixed header bar\nhero        # Wraps the hero teaser (if available)\nhtmltitle   # Wraps the &lt;title&gt; tag\nlibs        # Wraps the JavaScript libraries (header)\noutdated    # Wraps the version warning\nscripts     # Wraps the JavaScript application (footer)\nsite_meta   # Wraps the meta tags in the document head\nsite_nav    # Wraps the site navigation and table of contents\nstyles      # Wraps the style sheets (also extra sources)\ntabs        # Wraps the tabs navigation (if available)\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/create-site-project/#comment-system","title":"Comment system","text":"<p>Disqus can be easily integrated into theme by overriding the file <code>post-content.html</code>, and adding <code>disqus</code> section. See full guide here.</p> mkdocs.yml<pre><code>extra:\ndisqus: \"vuquangtrong-github-io\"\n</code></pre> overrides\\partials\\post-content.html<pre><code>{# edit button #}\n{% if page.edit_url %}\n    &lt;a href=\"{{ page.edit_url }}\" title=\"{{ lang.t('edit.link.title') }}\" class=\"md-content__button md-icon\"&gt;\n        {% include \".icons/material/pencil.svg\" %}\n    &lt;/a&gt;\n{% endif %}\n\n{% include \"partials/post-cover.html\" %}\n\n&lt;hr class=\"screen-only\"&gt;\n\n{% include \"partials/post-toc.html\" %}\n\n{# show the children pages if no content #}\n{% if page.markdown == '' and page.parent.children %}\n    &lt;h2&gt;Posts in this section:&lt;/h2&gt;\n    &lt;ol&gt;\n        {% for obj in page.parent.children %}\n            {% if obj.is_section %}\n                {% set p = obj.children[0] %}\n                &lt;li&gt;\n                    &lt;a href=\"{{ p.canonical_url }}\"&gt;\n                        {%- if p.meta and p.meta.title -%}\n                            {{- p.meta.title -}}\n                        {%- else -%}\n                            {{- p.title -}}\n                        {%- endif -%}\n                    &lt;/a&gt;\n                &lt;/li&gt;\n            {% endif %}\n        {% endfor %}\n    &lt;/ol&gt;\n{% else %}\n    {# content #}\n    {{ page.content }}\n{% endif %}\n\n{% if page.markdown == '' and page.parent.children %}\n{% else %}\n    {# comment #}\n    {% include \"partials/disqus.html\" %}\n{% endif %}\n</code></pre> overrides\\partials\\disqus.html<pre><code>&lt;!-- Get setting from mkdocs.yml, but allow page-level overrides --&gt;\n{% set disqus = config.extra.disqus %}\n{% if page.meta and page.meta.disqus is string %}\n    {% set disqus = page.meta.disqus %}\n{% endif %}\n\n&lt;!-- Inject Disqus into current page --&gt;\n{% if not page.is_homepage and disqus %}\n    &lt;h2 id=\"__comments\"&gt;{{ lang.t(\"meta.comments\") }}&lt;/h2&gt;\n    &lt;div id=\"disqus_thread\"&gt;&lt;/div&gt;\n    &lt;script&gt;\nvar disqus_config = function () {\nthis.page.url = \"{{ page.canonical_url }}\"\nthis.page.identifier =\n\"{{ page.canonical_url | replace(config.site_url, '') }}\"\n}\n\n/* Set up for the first time */\nif (typeof DISQUS === \"undefined\") {\nvar script = document.createElement(\"script\")\nscript.async = true\nscript.src = \"https://{{ disqus }}.disqus.com/embed.js\"\nscript.setAttribute(\"data-timestamp\", Date.now())\n\n/* Inject script tag */\ndocument.body.appendChild(script)\n\n/* Set up on navigation (instant loading) */\n} else {\nDISQUS.reset({\nreload: true,\nconfig: disqus_config\n})\n}\n&lt;/script&gt;\n{% endif %}\n</code></pre> <ol> <li> <p>https://en.wikipedia.org/wiki/Serif \u21a9</p> </li> <li> <p>https://en.wikipedia.org/wiki/Slashed_zero \u21a9</p> </li> </ol>","tags":["mkdocs"]},{"location":"blog/site-setup/handle-missing-page/","title":"Hanlde Page Not Found (404) error","text":"","tags":["javascript"]},{"location":"blog/site-setup/handle-missing-page/#the-404-page","title":"The 404 page","text":"<p>Whenever a page is not found in a website, the error <code>404</code> is return to the requested users. I need to create this special page to display a short message and guide user to search in this blog.</p> <p>The 404 page should be created in the <code>overrides</code> folder as it will replace the default 404 pages of Material theme.</p> <p>TRY THIS 404 Page</p>","tags":["javascript"]},{"location":"blog/site-setup/handle-missing-page/#layout-and-content","title":"Layout and content","text":"<p>Its layout is based on the <code>main.html</code>, and the content is a message displayed in the center of the page. The <code>disqus</code> comment section is removed. The sidebar should not be visible to display message clearly.</p>","tags":["javascript"]},{"location":"blog/site-setup/handle-missing-page/#search-suggestion","title":"Search suggestion","text":"<p>I assume that the path of URL contains keywords of what users are looking for. Therefore, after getting the requested URL from <code>window.location.pathname</code>, I will try to open a search form filled with those keywords.</p> <p>JavaScript is helpful here. The sequence of handling is as below:</p> <ol> <li>Show 404 message and wait for 5 seconds</li> <li>Open search form</li> <li>Get URL path name, and spit it into keywords</li> <li>For each keyword, fill it into input form</li> <li>Fire events (value changed, element focused) to trigger search engine</li> </ol> <p>Delay using Asynchronous function</p> <p>Looking up result may take some time to return, therefore, async function is used to wait for the data.</p>","tags":["javascript"]},{"location":"blog/site-setup/handle-missing-page/#source-code","title":"Source code","text":"overrides\\404.html<pre><code>{% extends \"main.html\" %}\n\n{% block site_nav %}\n{% endblock %}\n\n{% block content %}\n\n{# styles #}\n&lt;style&gt;\n.md-typeset .caution * {\ntext-align: center;\n}\n.md-typeset .caution h3 {\nborder-bottom: none;\n}\n&lt;/style&gt;\n\n&lt;div class=\"caution\"&gt;\n    &lt;h1&gt;\n        Oops! Something went wrong!\n    &lt;/h1&gt;\n    &lt;h3&gt;\n        Please go back to the &lt;a href=\"{{ config.site_url }}\"&gt;{{ config.site_name }}&lt;/a&gt; homepage,&lt;br&gt;\n        or press &lt;kbd&gt;S&lt;/kbd&gt; to search on this site.\n    &lt;/h3&gt;\n\n    &lt;p id=\"info\"&gt; We will open a search for your in &lt;span id=\"counter\"&gt;5&lt;/span&gt; second(s)!&lt;/p&gt;\n\n&lt;/div&gt;\n\n&lt;!-- Open search --&gt;\n&lt;script&gt;\nfunction sleep(ms) {\nreturn new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\n\nfunction countdown() {\nvar i = 4;\nvar x = setInterval(function () {\ndocument.getElementById(\"counter\").textContent = i;\ni--;\nif (i &lt; 0) {\nclearInterval(x);\ndocument.getElementById(\"info\").style.display = \"none\";\nsearchForUserRequest();\n}\n}, 1000);\n}\n\nasync function searchForUserRequest() {\ndocument.querySelector(\"label.md-search__icon.md-icon\").click();\n\npathname = window.location.pathname;\nrequests = pathname.split(\"/\");\n\nfor (var i = requests.length - 1; i &gt; 0; i--) {\nif (await haveSearchResult(requests[i])) {\nbreak;\n}\n}\n}\n\nasync function haveSearchResult(request) {\nconsole.log(request);\n\ndocument.forms.search.query.value = request;\nvar ev = new Event('change');\ndocument.forms.search.query.dispatchEvent(ev);\nvar ev2 = new Event('focus');\ndocument.forms.search.query.dispatchEvent(ev2);\n\nawait sleep(1000);\nresult = document.querySelector(\"div.md-search-result__meta\").textContent;\nif (result == 'No matching documents') {\nreturn false;\n}\nreturn true;\n}\n\nwindow.onload = countdown;\n\n&lt;/script&gt;\n{% endblock %}\n\n{% block disqus %}\n{% endblock %}\n</code></pre>","tags":["javascript"]},{"location":"blog/site-setup/markdown-syntax/","title":"Syntaxes for Writing Markdown Documents","text":"<p>For basic markdown syntax, refer to Markdown Guide</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#meta-data","title":"Meta-data","text":"<p>The Meta-Data extension adds a syntax for defining meta-data of a document. It is inspired by and follows the syntax of MultiMarkdown. Meta-data is the additional information that can be used to briefly describe the content of a post, such as the title, the short description, tags, and sometimes the banner image. I prefer YAML format:</p> <pre><code>---\ntitle: The page title\ndescription: The summary of the page content\n---\n</code></pre> <p>The meta-data can be used in the template and the page content1. In Jinja syntax, each page is represented as a <code>page</code> object, then the meta-data field <code>{{page.meta.title}}</code> will be replaced by the string <code>The page title</code>.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#code-highlighting","title":"Code highlighting","text":"<p>Below extensions are extremely useful for showing code blocks by adding colors, and decoration.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#inline-code","title":"Inline code","text":"<p>The InlineHilite is an inline code highlighter inspired by CodeHilite.</p> <p>Borrowing from CodeHilite\u2019s existing syntax, InlineHilite utilizes the following syntax to insert inline highlighted code: <code>`:::language my code`</code> or <code>`#!language my code`</code>.</p> <p>This will render this line <code>`#!python [x for x in range(1, 10) if x % 2]`</code> to a fully colored inline Python code: <code>[x for x in range(1, 10) if x % 2]</code>.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#code-blocks","title":"Code blocks","text":"<p>The Code blocks plugin provides a number of features including allowing the nesting of fences, and ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Highlighting can be further controlled via the Highlight extension.</p> <p>The standard format which supports to add <code>id</code>, <code>class</code>, or custom attribute <code>key=value</code> is as below:</p> <pre><code>```{ .language #id .class key=\"value\"}\ncontent\n```\n</code></pre> <p>Some special attributes <code>key=value</code> are as below:</p> <ul> <li><code>title=\"abc\"</code> creates a title for the block, used to show the filename or the purpose.</li> <li><code>linenums=\"n\"</code> creates line numbers starting from n.</li> <li><code>hl_lines=\"x y-z\"</code> highlights the x-th line and lines in the range from y-th to z-th. Line numbers are always referenced starting at 1 ignoring what the line number is started labeling at the number set by the option <code>linenums=\"n\"</code>.</li> </ul> <p>Example:</p> <pre><code>``` cpp title=\"main.c\" linenums=\"2\" hl_lines=\"1 4-5\"\n#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"Hello world!\\n\");\n    return 0;\n}\n```\n</code></pre> <p>Result:</p> main.c<pre><code>#include &lt;stdio.h&gt;\nint main(void) {\nprintf(\"Hello world!\\n\");\nreturn 0;\n}\n</code></pre>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#code-annotations","title":"Code annotations","text":"<p>Code annotation is a unique feature of Material theme which offers a comfortable and friendly way to attach arbitrary content to specific sections of code blocks by adding numeric markers in block and inline comments in the language of the code block.</p> <p>Code annotations can be placed anywhere in a code block where a comment for the language of the block can be placed, e.g. for JavaScript in <code>// ...</code> and <code>/* ... */</code>, for YAML in <code># ...</code>, etc.</p> <p>Example:</p> <pre><code>``` cpp\nint main(void) {\n    printf(\"Hello world!\\n\");\n    return 0;\n}\n```\n\n1. Need including\\\n   `#!cpp #include &lt;stdio.h&gt;`\n</code></pre> <p>Result: </p> <p>Click on  to show the annotation.</p> <pre><code>int main(void) {\nprintf(\"Hello world!\\n\"); // (1)\nreturn 0;\n}\n</code></pre> <ol> <li>Need including <code>#include &lt;stdio.h&gt;</code></li> </ol>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#admonitions","title":"Admonitions","text":"<p>Admonitions, also known as call-outs, are an excellent choice for including side content without significantly interrupting the document flow.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#marked-blocks","title":"Marked blocks","text":"<p>These types of blocks show an icon to help readers notice the kind of content, such as additional information, caution, or error.</p> <p>Example:</p> <pre><code>!!! info \"The title of the block\"\n\n    The content can contain formatted text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam sagittis ante blandit diam accumsan scelerisque.\n\n    - Lorem ipsum dolor sit amet\n    - Lorem ipsum dolor sit amet\n\n    ``` cpp\n    int main(void) {\n        return 0;\n    }\n    ```\n</code></pre> <p>Result:</p> <p>The title of the block</p> <p>The content can contain formatted text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam sagittis ante blandit diam accumsan scelerisque.</p> <ul> <li>Lorem ipsum dolor sit amet</li> <li>Lorem ipsum dolor sit amet</li> </ul> <pre><code>int main(void) {\nreturn 0;\n}\n</code></pre> <p>To remove the title but keep the icon, use a space:</p> <pre><code>!!! hint \" \"\n\n    Need some CSS styles to adjust content block of admonitions.\n</code></pre> <p>Result:</p> <p> </p> <p>Need some CSS styles to adjust content block of admonitions.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#supported-types","title":"Supported types","text":"<p>abstract, summary, tldr</p> <p>info, todo</p> <p>tip, hint, important</p> <p>success, check, done</p> <p>question, help, faq</p> <p>tag</p> <p>warning, caution, attention</p> <p>failure, fail, missing</p> <p>danger, error</p> <p>bug</p> <p>example</p> <p>quote, cite</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#collapsible-blocks","title":"Collapsible blocks","text":"<p>When Details is enabled and an admonition block is started with <code>???</code> instead of <code>!!!,</code> the admonition is rendered as a collapsible block with a small toggle on the right side. Use plus (<code>+</code>) sign to make it expanded by default.</p> <p>Example:</p> <pre><code>???+ quote \"Expandable\"\n\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\n</code></pre> <p>Result:</p> Expandable <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#mathjax","title":"MathJax","text":"<p>MathJax is a beautiful and accessible way to display mathematical content in the browser, adds support for mathematical typesetting in different notations (e.g. LaTeX, MathML, AsciiMath).</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#block-syntax","title":"Block syntax","text":"<p>Blocks must be enclosed in <code>$$...$$</code> or <code>\\[...\\]</code> on separate lines:</p> <p>Example:</p> <pre><code>$$\n\\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}}\n$$\n</code></pre> <p>Result:</p> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\]","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#inline-syntax","title":"Inline syntax","text":"<p>Inline blocks must be enclosed in <code>$...$</code> or <code>\\(...\\)</code> :</p> <p>Example:</p> <pre><code>The homomorphism $f$ is injective if and only if its kernel is only the singleton set $e_G$, because otherwise $\\exists a,b \\in G$ with $a \\neq b$ such that $f(a)=f(b)$.\n</code></pre> <p>Result:</p> <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b \\in G\\) with \\(a \\neq b\\) such that \\(f(a)=f(b)\\).</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#formatting","title":"Formatting","text":"<p>Beside Italic, Bold, Italic and Bold, here are some more syntax to format texts.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#caret","title":"Caret","text":"<p>Caret optionally adds two different features which are syntactically built around the <code>^</code> character.</p> <p>The double carets <code>^^</code> inserts <code>&lt;ins&gt;&lt;/ins&gt;</code> tags, and the single caret <code>^</code> inserts <code>&lt;sup&gt;&lt;/sup&gt;</code> tags.</p> <p>Example:</p> <pre><code>The ^^mass-energy^^ equivalence: E=m*c^2^.\n</code></pre> <p>Result:</p> <p>The mass-energy equivalence: E=m*c2. </p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#mark","title":"Mark","text":"<p>Mark adds the ability to insert <code>&lt;mark&gt;&lt;/mark&gt;</code> tags.</p> <p>The syntax requires the text to be surrounded by double equal signs <code>==</code> .</p> <p>Example:</p> <pre><code>==mark me== and ==mark==me==all==.\n</code></pre> <p>Result:</p> <p>mark me and mark==me==all.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#tildes","title":"Tildes","text":"<p>Tildes optionally adds two different features which are syntactically built around the <code>~</code> character.</p> <p>Add Deletion by using double tildes <code>~~</code> which inserts <code>&lt;del&gt;&lt;/del&gt;</code> tags and Add Subscript by using single tilde <code>~</code> which inserts <code>&lt;sub&gt;&lt;/sub&gt;</code> tags.</p> <p>Example:</p> <pre><code>~~Remove~~ the existence of CH~3~CH~2~OH.\n</code></pre> <p>Result:</p> <p>Remove the existence of CH3CH2OH.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#critic","title":"Critic","text":"<p>Critic is an extension that adds handling and support of Critic Markup which uses a special syntax to represent edits to a Markdown document. This extension runs before all other extensions to parse the critic edits.</p> <p>Critic Markup uses special markup to insert, delete, substitute, highlight, and comment.</p> <p>Example:</p> <pre><code>To insert or remove text, use {\u200b++insert me++} and {\u200b--remove me--}.\\\nDenote a substitution with {\u200b~~that ~&gt; this one~~}.\n\nHighlight specific text with {\u200b==highlight me==}.\\\nOr even add {\u200b&gt;&gt;a comment&lt;&lt;}.\n</code></pre> <p>Result:</p> <p>To insert or remove text, use insert me and remove me. Denote a substitution with that  this one.</p> <p>Highlight specific text with highlight me. Or even add a comment.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#lists","title":"Lists","text":"<p>This element allows to group a set of related items in lists. Children items can be numbered in ordered list, or even can have inline checkbox.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#ordered-list","title":"Ordered list","text":"<pre><code>1. Ordered item 1\n    1. Child 1\n    2. Child 2\n2. Ordered item 2\n</code></pre> <ol> <li>Ordered item 1<ol> <li>Child 1</li> <li>Child 2</li> </ol> </li> <li>Ordered item 2</li> </ol>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#unordered-list","title":"Unordered list","text":"<pre><code>-   Unordered item 1\n    -   Child 1\n    -   Child 2\n-   Unordered item 2\n</code></pre> <ul> <li>Unordered item 1<ul> <li>Child 1</li> <li>Child 2</li> </ul> </li> <li>Unordered item 2</li> </ul>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#task-list","title":"Task list","text":"<pre><code>-   [x] item 1\n    -   [x] item a\n    -   [ ] item b\n-   [ ] item 2\n</code></pre> <ul> <li> item 1<ul> <li> item a</li> <li> item b</li> </ul> </li> <li> item 2</li> </ul>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#definition","title":"Definition","text":"<pre><code>Roses\n:   are red\n\nViolets\n:   are blue\n</code></pre> Roses are red Violets are blue","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#images","title":"Images","text":"<p>There are some extensions to add a caption to an image. After testing, markdown-captions is a good one that uses the alternate text to make caption, accepts markdown in the alternate text.</p> <pre><code>![A photo from &lt;https://picsum.photos&gt;](https://picsum.photos/320/240)\n</code></pre> <p> A photo from https://picsum.photos </p> <p>Some images have big size that does not show the detail, therefore, it\u2019s better to zoom in by clicking on them, and pan the image on the screen. The view-bigimg library can do that requirement well.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#tabs","title":"Tabs","text":"<p>Tabbed extension provides a syntax to easily add tabbed Markdown content.</p> <p>Tabs start with <code>===</code> to signify a tab followed by a quoted title. Consecutive tabs are grouped into a tab set.</p> <p>Example:</p> <pre><code>=== \"Tab 1\"\n    Some texts\n\n    === \"Tab A\"\n        Text A\n\n    === \"Tab B\"\n        Text B\n\n=== \"Tab 2\"\n    Some other texts\n</code></pre> <p>Result:</p> Tab 1Tab 2 <p>Some texts</p> Tab ATab B <p>Text A</p> <p>Text B</p> <p>Some other texts</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#tables","title":"Tables","text":"<p>Markdown Tables are written in pipe-line format: row is on one line, cell is inline text only. The 1st line contains the column headers. The 2nd line is to control text alignment in a column: <code>:---</code>, <code>:---:</code> and <code>---:</code> are left, center, and right alignment. Styles for table need to change a little to show cell border.</p> <p>Example:</p> <pre><code>| Syntax     | Description  |   Test Text |\n| :--------- | :----------: | ----------: |\n| Left align | Center align | Right align |\n| A text     | Another text |  More texts |\n</code></pre> <p>Result:</p> Syntax Description Test Text Left align Center align Right align A text Another text More texts","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#icons--emojis","title":"Icons &amp; Emojis","text":"<p>The Emoji extension adds support for inserting emoji via simple short names enclosed within colons <code>:short_name:</code>. This is accomplished by using a short name index to map easy-to-remember names to the corresponding emoji characters.</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#emojis","title":"Emojis","text":"<p>Emojis can be written by putting the short-code of the emoji between two colons. Look up the short-codes at Emojipedia.</p> <p><code>:smile:</code> , and <code>:heart:</code> </p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#icons","title":"Icons","text":"<p>Icons can be used similarly to emojis, by referencing a valid path to any icon bundled with the theme, which are located in the <code>.icons</code> directory, and replacing <code>/</code> with <code>-</code>.</p> <p>E.g. The short-code <code>:material-account-circle:</code> will be converted to an SVG image element with the path <code>.icons/material/account-circle.svg</code> which eventually shows the icon  on the webpage.</p> <p>Using <code>include</code> function of Jinja to add an icon wrapped in a <code>twemoji</code> class, e.g. to show :</p> <pre><code>&lt;span class=\"twemoji\"&gt;\n    {% include \".icons/fontawesome/brands/twitter.svg\" %}\n&lt;/span&gt;\n</code></pre>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#escape-all","title":"Escape All","text":"<p>The Escape All extension makes the backslash <code>\\</code> character escape everything after it, except things in code blocks of any kind.</p> <p>There are two special escapes among all of these escapes though: escaping space characters and escaping newline characters:</p> <ul> <li>Enable <code>nbsp</code> to convert an escaped space into a non-breaking space: <code>&amp;nbsp;</code>.</li> <li>Enable <code>hardbreak</code> to convert an escaped newline to a hard break <code>&lt;br&gt;</code>. The advantage of hard break is that the backslash is visually seen in the document, opposed to the Markdown\u2019s default method of two spaces at the end of a line.</li> </ul>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#special-characters","title":"Special characters","text":"<p>The Smarty Pants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents.</p> Syntax Render <code>'single quote'</code> \u2018single quote\u2019 <code>\"double quote\"</code> \u201cdouble quote\u201d <code>&lt;&lt;angle quote&gt;&gt;</code> \u00abangle quote\u00bb <code>ellipses ...</code> ellipses \u2026 <code>N-dash --</code> N-dash \u2013 <code>M-dash ---</code> M-dash \u2013 <p>The Smart Symbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc.</p> Syntax Render <code>trademark (tm)</code> trademark \u2122 <code>copyright (c)</code> copyright \u00a9 <code>registered (r)</code> registered \u00ae <code>in care of c/o</code> in care of \u2105 <code>plus or minus +/-</code> plus or minus \u00b1 <code>arrows --&gt; &lt;-- &lt;--&gt;</code> arrows \u2192 \u2190 \u2194 <code>not equal =/=</code> not equal \u2260 <code>fractions 1/4 2/3</code> fractions \u00bc \u2154 <code>ordinal numbers 1st 2nd 3rd 4th 5th</code> ordinal numbers 1st 2nd 3rd 4th 5th <p> </p> <p>Not all fractions can be displayed. To render fractions in a better format, use MathJax with inline format. Such as <code>$1 \\over 4$</code> \u2192 \\(1 \\over 4\\), or <code>$2 \\over 3$</code> \u2192 \\(2 \\over 3\\).</p>","tags":["markdown"]},{"location":"blog/site-setup/markdown-syntax/#footnotes","title":"Footnotes","text":"<p>The Footnotes extension adds syntax for defining footnotes in Markdown documents.</p> <p>Example:</p> <pre><code>Footnotes[^fn] have a label[^lb] and the footnote's content.\n\n[^fn]: This is a footnote content.\n[^lb]: A footnote on the label `lb`.\n</code></pre> <p>Result:</p> <p>Footnotes2 have a label3 and the footnote\u2019s content.</p> <ol> <li> <p>Use mkdocs-macros plugin to use Jinja template directly in the Markdown content.\u00a0\u21a9</p> </li> <li> <p>This is a footnote content.\u00a0\u21a9</p> </li> <li> <p>A footnote on the label <code>lb</code>.\u00a0\u21a9</p> </li> </ol>","tags":["markdown"]},{"location":"blog/site-setup/mkdocs-plugins/","title":"Additional Features using MkDocs Plugins","text":"<p>Places to get MkDocs Plugins: Official List, Wheelodex, and GitHub.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/mkdocs-plugins/#awesome-pages","title":"Awesome Pages","text":"<p>MkDocs Awesome Pages plugin simplifies configuring page titles and their entries order.</p> <p>Install the plugin:</p> <pre><code>pip install -U mkdocs-awesome-pages-plugin\n</code></pre> <p>Enable it in the config file <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- awesome-pages\n</code></pre> <p>Create a YAML file named <code>.pages</code> in a directory and use a local <code>nav</code> attribute to customize the navigation in each folder with some more extra configurations:</p> <ol> <li> <p>A 3-dots <code>...</code> entry is used to specify where all remaining items should be inserted. It can filter the remaining items using glob patterns or regular expressions. For example:</p> <p> </p> <p>The pattern is checked against the basename of remaining items - not their whole path, so it can be used to filter files in sub-folders.</p> </li> <li> <p>Hide directory by setting the <code>hide</code> attribute to <code>true</code>.</p> </li> <li> <p>Optionally set the directory title using the <code>title</code> attribute.     Optionally specify a title for the navigation entry before its document path. For example:</p> </li> <li> <p>Collapse single nested pages by setting <code>collapse_single_pages</code> attribute to <code>true</code>.</p> </li> </ol> <p>Example:</p> .pages<pre><code>title: New section\nnav:\n- ... | introduction-*.md\n- ...\n- summary.md\n- First page: page1.md\n- Link Title: https://example.com\nhide: false\ncollapse_single_pages: false\n</code></pre> <p> Using Awesome Pages plugin with <code>collapse_single_pages</code> enabled, before and after applying </p>","tags":["mkdocs"]},{"location":"blog/site-setup/mkdocs-plugins/#section-index","title":"Section index","text":"<p>This plugin is no longer used in this site! The feature <code>navigation.indexes</code> comes with Material theme already does the work of this plugin.</p> <p>In MkDocs, each directory will become a section, and by default, section only contains its children pages. There is no page associated to a section. MkDocs Section Index is a plugin that attaches the first child page, usually an index page, to the section link.</p> <p>Install the plugin:</p> <pre><code>pip install -U mkdocs-section-index\n</code></pre> <p>Enable it in the config file <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- awesome-pages\n- section-index # must be after awesome-pages # (1)\n</code></pre> <ol> <li>Note that the feature <code>navigation.indexes</code> comes with Material theme already to the work of this plugin.</li> </ol> <p>The merged section page shows the section\u2019s title from the directory name, not the attached page\u2019s title.</p> <p> Using the Section Index plugin, before and after applying </p>","tags":["mkdocs"]},{"location":"blog/site-setup/mkdocs-plugins/#revision-date","title":"Revision date","text":"<p>To keep tracking the last modified date of a post, git-revision-date plugin can be used. A better alternative plugin is git-revision-date-localized which provides more types of date format (e.g. in time-ago format), and the creation date.</p> <p>Install the plugin:</p> <pre><code>pip install -U mkdocs-git-revision-date-localized-plugin\n</code></pre> <p>Enable it in the config file:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- git-revision-date-localized:\nenable_creation_date: true\ntype: iso_date\n</code></pre> <p>This plugin creates new field in the post\u2019s meta-data which content the creation and update date. This information is used to sort the posts by revision date to get recently updated items, as shown in the Recent blog posts page.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/mkdocs-plugins/#print-to-pdf","title":"Print to PDF","text":"<p>Enabling this plugin causes very long build time when you have lot of posts!</p> <p>To export the posts on this blog, there are some plugins which can do it. However, most of them depend on Weasy Print which in turn depends on many other packages. There is one plugin that prints in an easy and simple way: use browser to print page by sending print command (like press <code>Ctrl + S</code>).</p> <p>More detail of installation and configuration the MkDocs PDF with JS plugin for printing to PDF can be read in Print to PDF.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/mkdocs-plugins/#macros","title":"Macros","text":"<p>This plugin is no longer used in this site!</p> <p>MkDocs Macros is a plugin/ framework that makes it easy to produce richer and more beautiful pages. It can do two things:</p> <ol> <li> <p>Transform the markdown pages into a Jinja2 templates that can use variables, macros and filters.</p> </li> <li> <p>Replace MkDocs plugins for a wide range of tasks: e.g. manipulating the navigation, adding files after the HTML pages have already been generated etc.</p> </li> </ol> <p>Install the plugin:</p> <pre><code>pip install -U mkdocs-macros-plugin\n</code></pre> <p>Enable it in the config file:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- macros\n</code></pre> <p>Incomplete data in macro</p> <p>The macro <code>{{navigation.pages}}</code> contains a list of all pages, but the data of each page maybe not complete, such as title or meta-data.</p> <p>This issue happens when rendering a the content of the first page, but it needs to know the content of the second page which has not been parsed already as it is waiting for the first page getting done.</p>","tags":["mkdocs"]},{"location":"blog/site-setup/mkdocs-plugins/#drawio-exporter","title":"DrawIO Exporter","text":"<p>This plugin is no longer used in this site!</p> <p>DrawIO Exporter is a great plugin that exports the <code>.drawio</code> diagrams to images at build time and insert them to the document. This plugin can replace the Mermaid plugin, and it is faster thanks to no JavaScript needed at runtime. It also helps to enable instant navigation mode of the Material theme.</p> <p>Install the plugin:</p> <pre><code>pip install -U mkdocs-drawio-exporter\n</code></pre> <p>Enable it in the config file:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- drawio-exporter\n</code></pre> <p>To create end edit <code>.drawio</code> diagram, download and install the diagrams.net application.</p> <p>To import a diagram, just use the syntax for inserting an image:</p> <pre><code>![My alt text](my-diagram.drawio)\n</code></pre> <p>The plugin will generate an SVG image to a cache folder (default in <code>docs\\drawio-exporter</code>), and then modify the image\u2019s source to point to the generated image.</p> <p>If the diagram is a multipage document, append the index of the page as an anchor in the image\u2019s URL to select the target page:</p> <pre><code>![Page 1](my-diagram.drawio#0)\n</code></pre> <p> A draw.io diagram </p> <p>Alternative method</p> <p>Using Draw.io Integration extension in Visual Studio Code, I can save a DrawIO diagram as a <code>.drawio.svg</code> file, then use that file directly in the page as an usual image. However this method will not support multiple pages in the drawing:</p> <pre><code>![My alt text](my-diagram.drawio.svg)   // work\n![My alt text](my-diagram.drawio.svg#1) // does not work\n</code></pre>","tags":["mkdocs"]},{"location":"blog/site-setup/mkdocs-plugins/#mermaid","title":"Mermaid","text":"<p>This plugin is no longer used in this site!</p> <p>MkDocs Mermaid2 is a plugin to render textual graph description into Mermaid graphs (flow charts, sequence diagrams, pie charts, etc.).</p> <p>Install the plugin:</p> <pre><code>pip install -U mkdocs-mermaid2-plugin\n</code></pre> <p>Enable it in the config file:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- mermaid2\n</code></pre> <p>And configure the code block parser for mermaid2 blocks:</p> <pre><code>markdown_extensions:\n- pymdownx.superfences:\ncustom_fences:\n- name: mermaid\nclass: mermaid\nformat: !!python/name:mermaid2.fence_mermaid\n</code></pre> <p>Example:</p> <pre><code>``` mermaid\ngraph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];\n```\n</code></pre> <p>will render as:</p> <p> A diagram generated by Mermaid </p>","tags":["mkdocs"]},{"location":"blog/site-setup/print-to-pdf/","title":"Print Pages to PDF files","text":"","tags":["python"]},{"location":"blog/site-setup/print-to-pdf/#the-cover-page","title":"The cover page","text":"<p>When printing to a PDF file, the first page should show the post title and its short description. This page is called the cover page which will be created only in printing mode.</p> <p>Create an element with class <code>cover</code> in the <code>post-cover.html</code> template to wrap the cover section. In print mode, this element should cover the full height (100%) of the first paper and align its content vertically. After the line of tags, the updated date will be shown to easily check the latest version of the document:</p> overrides\\partials\\post-cover.html<pre><code>{# the cover page #}\n&lt;style&gt;\n.md-typeset .cover {\nmargin-bottom: 1em;\n}\n.md-typeset .page-category {\ncolor: gray;\nfont-size: large;\n}\n.md-typeset .page-title {\nmargin-left: -0.0625em;\n}\n.md-typeset .page-extra {\ncolor: gray;\nfont-size: small;\n}\n.md-typeset .page-tags {\nmargin: 0;\n}\n.md-typeset .page-date {\nmargin: 0;\ntext-align: end;\n}\n@media print {\n.md-typeset .cover {\nheight: 100vh;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\n}\n.md-typeset .cover + * {\nmargin-top: 0;\n}\n}\n&lt;/style&gt;\n\n&lt;div class=\"cover\"&gt;\n    {# category #}\n    {% if page.meta and page.meta.category %}\n    &lt;span class=\"page-category\"&gt;\n        {{ page.meta.category }} \u00bb\n    &lt;/span&gt;\n    &lt;br&gt;\n    {% endif %}\n\n    {# title #}\n    &lt;h1 class=\"page-title\"&gt; {{ page_title | d(config.site_name, true) }} &lt;/h1&gt;\n\n    {# description #}\n    {% if page.meta and page.meta.description %}\n        &lt;p class=\"page-description\"&gt;\n            {{ page.meta.description }}\n        &lt;/p&gt;\n    {% endif %}\n\n    {% if page.markdown == '' and page.parent.children %}\n\n    {% else %}\n        &lt;div class=\"page-extra row\"&gt;\n            &lt;div class=\"col\"&gt;\n            {% if page.meta and page.meta.tags %}\n                &lt;p class=\"page-tags\"&gt;\n                    {% for tag in page.meta.tags %}\n                        &lt;a class=\"tag\" href=\"{{ config.site_url }}tags/#{{tag}}\"&gt;\n                            &lt;span class=\"tag-name\"&gt;\n                                #{{ tag }} &amp;nbsp;\n                            &lt;/span&gt;\n                        &lt;/a&gt;\n                    {% endfor %}\n                &lt;/p&gt;\n            {% endif %}\n\n            &lt;/div&gt;\n            &lt;div class=\"col\"&gt;\n                &lt;p class=\"page-date\"&gt;\n                    &lt;span&gt;\n                    {% if page.meta.git_revision_date_localized_raw_iso_date %}\n                        {{ lang.t(\"source.file.date.updated\") }}:\n                        {{ page.meta.git_revision_date_localized_raw_iso_date }}\n                    {% endif %}\n                    &lt;/span&gt;\n                &lt;/p&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    {% endif %}\n&lt;/div&gt;\n</code></pre>","tags":["python"]},{"location":"blog/site-setup/print-to-pdf/#the-table-of-content-page","title":"The Table of Content page","text":"<p>When displaying on a screen, the Table of Content is displayed in the right sidebar. In printed pages, there should be a page to display the table of content too. This page is also only visible in printing.</p> <p>The base Material for MkDocs theme has a partial block for Table of Content section, so I just need to declare it in <code>post-toc.html</code> and include it in the <code>main.html</code> template, between the cover page and the main content.</p> overrides\\partials\\post-toc.html<pre><code>{# the table of content page #}\n&lt;style&gt;\n.md-typeset .toc {\ndisplay: none;\n}\n.md-typeset .toc label {\ndisplay: none;\n}\n.md-typeset .toc .md-nav {\nfont-size: unset;\nline-height: 1.6;\n}\n.md-typeset .toc .md-nav--secondary {\nmargin-left: -2em;\n}\n.md-typeset .toc .md-nav__list {\nmargin: 0;\n}\n.md-typeset .toc ul {\nlist-style: none;\n}\n@media print {\n.md-typeset .toc {\ndisplay: block;\npage-break-after: always;\n}\n.md-typeset .toc .md-nav__link {\ncolor: var(--md-typeset-a-color);\n}\n.md-typeset .toc .md-nav__link.md-nav__link--active {\nfont-weight: unset;\n}\n.md-typeset .toc + * {\nmargin-top: 0;\n}\n}\n&lt;/style&gt;\n\n&lt;div class=\"toc\"&gt;\n    &lt;h2&gt;Table of Content&lt;/h2&gt;\n    {% include \"partials/toc.html\" %}\n&lt;/div&gt;\n</code></pre> <p>There are some styles applied for this section:</p> <ul> <li>Hide the default label and add a new <code>&lt;h2&gt;</code> header</li> <li>Remove list-style to make a clear list</li> <li>When printing, remove color effect on link items</li> </ul> <p> Preview of the printing document </p>","tags":["python"]},{"location":"blog/site-setup/print-to-pdf/#printing-styles","title":"Printing styles","text":"<p>There are some more additional styles need to be applied on the page when printing. I preview the printed version using Save to PDF option in the Chrome browser.</p> <p>Set the paper size and printing margins:</p> <pre><code>@page {\nsize: a4 portrait;\nmargin: 25mm 15mm 25mm 20mm;\n}\n</code></pre> <p>Some elements only show in printing version, add media query type to display them:</p> <pre><code>.md-typeset .print-only {\ndisplay: none;\n}\n@media print {\n.md-typeset .print-only {\ndisplay: block;\n}\n.md-typeset .screen-only {\ndisplay: none;\n}\n}\n</code></pre> <p>Tabs labels should be marked in printing as they are selected:</p> <pre><code>.md-typeset .tabbed-set &gt; label {\nborder-color: var(--md-accent-fg-color);\ncolor: var(--md-accent-fg-color);\n}\n</code></pre> <p>The Disqus section also needs to be hidden in printing:</p> <pre><code>@media print {\n.md-typeset #__comments,\n.md-typeset #disqus_recommendations,\n.md-typeset #disqus_thread {\ndisplay: none;\n}\n}\n</code></pre> <p>Image and its caption should be displayed in the same page:</p> <pre><code>@media print {\n.md-typeset figure {\npage-break-inside: avoid;\n}\n}\n</code></pre> <p>Admonition can be printed on multiple pages:</p> <pre><code>@media print {\n.md-typeset .admonition,\n.md-typeset details {\npage-break-inside: auto;\n}\n}\n</code></pre>","tags":["python"]},{"location":"blog/site-setup/print-to-pdf/#print-to-pdf-plugin","title":"Print to PDF plugin","text":"<p>This feature is disabled by default !!!</p> <p>The plugin depends on Chrome and Chrome Driver, and it also consumes quite long time to finish rederning. It is recommended to manually print pages that you need.</p> <p>The MkDocs PDF with JS Plugin1 exports documentation in PDF format with rendered JavaScript content. This is very useful if documents have mermaid diagrams. A download button will be added to the top of the page, and it is hidden in the PDF files.</p> <p>For executing the JavaScript code, ChromeDriver is used, so it is necessary to:</p> <ol> <li>Install Chrome, find the Chrome version in About section.</li> <li>Download ChromeDriver, note to choose correct version of driver based on your installed Chrome version.</li> <li>Add the ChromeDriver to OS user\u2019s <code>PATH</code> environment.</li> </ol> <p> After that, install the plugin:</p> <pre><code>pip install -U git+https://github.com/vuquangtrong/mkdocs-pdf-with-js-plugin.git\n</code></pre> <p> </p> <p>Install the original plugin with <code>pip install mkdocs-pdf-with-js-plugin</code> if don\u2019t need a customized version. The following features are not implemented in the original version.</p> <p>Enable the plugin:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- pdf-with-js\n</code></pre> <p>While building <code>mkdocs build</code> or serving <code>mkdocs serve</code> the documentation, the PDF files will be generated. They are stored in the <code>site\\pdfs</code> folder.</p>","tags":["python"]},{"location":"blog/site-setup/print-to-pdf/#add-header-and-footer","title":"Add header and footer","text":"<p>The command sent to ChromeDriver to print a page is <code>Page.printToPDF</code>, read more at Chrome DevTools Protocol \u2014 <code>printToPDF</code>.</p> <p>This command needs some parameters to control the printing, which include:</p> landscape : boolean Paper orientation. Defaults to false. displayHeaderFooter : boolean Display header and footer. Defaults to false. headerTemplate: string <p>HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them:</p> <ul> <li>date: formatted print date</li> <li>title: document title</li> <li>url: document location</li> <li>pageNumber: current page number</li> <li>totalPages: total pages in the document</li> </ul> <p>For example, <code>&lt;span class=title&gt;&lt;/span&gt;</code> would generate a span containing the title.</p> footerTemplate : string HTML template for the print footer. Should use the same format as the headerTemplate. <p>Those parameters are initialized in the <code>__init__</code> function:</p> <pre><code>def __init__(self):\n    self.displayHeaderFooter = True\n    self.headerTemplate = \\\n        '&lt;div style=\"font-size:8px; margin:auto;\"&gt;' \\\n        '&lt;span class=title&gt;&lt;/span&gt;' \\\n        '&lt;/div&gt;'\n    self.footerTemplate= \\\n        '&lt;div style=\"font-size:8px; margin:auto;\"&gt;' \\\n        'Page &lt;span class=\"pageNumber\"&gt;&lt;/span&gt; of ' \\\n        '&lt;span class=\"totalPages\"&gt;&lt;/span&gt;' \\\n        '&lt;/div&gt;'\n</code></pre> <p>and they are used to creating print options in a dictionary variable:</p> <pre><code>def _get_print_options(self):\n    return {\n        'landscape': False,\n        'displayHeaderFooter': self.displayHeaderFooter,\n        'footerTemplate': self.footerTemplate,\n        'headerTemplate': self.headerTemplate,\n        'printBackground': True,\n        'preferCSSPageSize': True,\n    }\n</code></pre> <p>Finally, the print options are used in the print command:</p> <pre><code>def print_to_pdf(self, driver, page):\n    driver.get(page[\"url\"])\n    result = self._send_devtools_command(\n        driver, \"Page.printToPDF\",\n        self._get_print_options()\n    )\n    self._write_file(result['data'], page[\"pdf_file\"])\n</code></pre>","tags":["python"]},{"location":"blog/site-setup/print-to-pdf/#add-plugin-config-options","title":"Add plugin config options","text":"<p>To allow user to change the print options in the project config file <code>mkdocs.yml</code>, add the config fields into the <code>plugin.py</code> file.</p> <pre><code>class PdfWithJS(BasePlugin):\n    config_scheme = (\n        ('enable', config_options.Type(bool, default=True)),\n        ('display_header_footer', config_options.Type(bool, default=False)),\n        ('header_template', config_options.Type(str, default='')),\n        ('footer_template', config_options.Type(str, default='')),\n    )\n</code></pre> <p>When the MkDocs engine calls to <code>on_config()</code> function in this plugin, save the user\u2019s configs as below:</p> <pre><code>def on_config(self, config, **kwargs):\n    self.enabled = self.config['enable']\n    self.printer.set_config (\n        self.config['display_header_footer'],\n        self.config['header_template'],\n        self.config['footer_template']\n        )\n    return config\n</code></pre> <p>By doing this, users can add their parameters to the <code>pdf-with-js</code> entry under the <code>plugins</code> field in the config file <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n- search # built-in search must be always activated\n- pdf-with-js:\nenable: false # should enable only when need PDF files\nadd_download_button: false\ndisplay_header_footer: true\nheader_template: &gt;-\n&lt;div style=\"font-size:8px; margin:auto; color:lightgray;\"&gt;\n&lt;span class=\"title\"&gt;&lt;/span&gt;\n&lt;/div&gt;\nfooter_template: &gt;-\n&lt;div style=\"font-size:8px; margin:auto; color:lightgray;\"&gt;\nPage &lt;span class=\"pageNumber\"&gt;&lt;/span&gt; of \n&lt;span class=\"totalPages\"&gt;&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>","tags":["python"]},{"location":"blog/site-setup/print-to-pdf/#add-a-download-button","title":"Add a download button","text":"<p>Create an element to contain the download button at the beginning of the document content in the <code>base.html</code> template. This element should be hidden in printing mode.</p> <p>The plugin will find the <code>&lt;div class=\"btn-actions\"&gt;</code> element to insert a button. If there is no such existing element, the plugin will create a new element and insert to the page content.</p> <pre><code>def _add_link(self, soup, page_paths):\n\n    icon = BeautifulSoup(''\n        '&lt;span class=\"twemoji\"&gt;'\n            '&lt;svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"&gt;'\n                '&lt;path d=\"M5 20h14v-2H5m14-9h-4V3H9v6H5l7 7 7-7z\"&gt;&lt;/path&gt;'\n            '&lt;/svg&gt;'\n        '&lt;/span&gt;',\n        'html.parser')\n    text = \"PDF\"\n\n    btn = soup.new_tag(\"a\", href=page_paths[\"relpath\"])\n    btn.append(icon)\n    btn.append(text)\n    btn['class'] = 'md-button'\n\n    bar = soup.find(\"div\", {\"class\" : \"btn-actions\"})\n    if bar:\n        bar.p.insert(0, btn)\n    else:\n        toc = soup.find(\"div\", {\"class\" : \"toc\"})\n        if toc:\n            div = BeautifulSoup(''\n                '&lt;div class=\"btn-actions screen-only\"&gt;'\n                    '&lt;p&gt;&lt;/p&gt;'\n                '&lt;/div&gt;',\n                'html.parser')\n            div.p.insert(0, btn)\n            toc.insert_after(div)\n\n    return soup\n</code></pre> <p>That\u2019s it. All blog posts now have a download button for users to get the PDF version.</p> <ol> <li> <p>originally developed by smaxtec \u21a9</p> </li> </ol>","tags":["python"]}]}